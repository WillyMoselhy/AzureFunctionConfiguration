<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="24" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2023-03-25" time="15:31:10">
  <environment nunit-version="2.5.8.0" cwd="C:\GitDevOps\AzureFunctionConfiguration" machine-name="DESKTOP-K2LN8MJ" user-domain="MIDDLEEAST" clr-version="Unknown" user="wmoselhy" os-version="10.0.25324" platform="Microsoft Windows 11 Enterprise Insider Preview|C:\WINDOWS|\Device\Harddisk0\Partition3" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="0.3514" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\GitDevOps\AzureFunctionConfiguration\tests\general\Help.Tests.ps1" executed="True" result="Success" success="True" time="0.3514" asserts="0" description="C:\GitDevOps\AzureFunctionConfiguration\tests\general\Help.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test help for Get-FunctionConfig" executed="True" result="Success" success="True" time="0.0806" asserts="0" description="Test help for Get-FunctionConfig">
            <results>
              <test-suite type="TestFixture" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig" executed="True" result="Success" success="True" time="0.0741" asserts="0" description="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig">
                <results>
                  <test-suite type="ParameterizedTest" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig.gets help for parameter: Name : in Get-FunctionConfig" executed="True" result="Success" success="True" time="0.0071" asserts="0" description="gets help for parameter: Name : in Get-FunctionConfig">
                    <results>
                      <test-case description="gets help for parameter: Name : in Get-FunctionConfig" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig.gets help for parameter: Name : in Get-FunctionConfig(@{name=Name; description=System.Management.Automation.PSObject[]; defaultValue=; parameterValue=String; type=@{name=String}; required=true; globbing=false; pipelineInput=false; position=1})" time="0.0071" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig.help for Name parameter in Get-FunctionConfig has correct Mandatory value" executed="True" result="Success" success="True" time="0.0074" asserts="0" description="help for Name parameter in Get-FunctionConfig has correct Mandatory value">
                    <results>
                      <test-case description="help for Name parameter in Get-FunctionConfig has correct Mandatory value" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig.help for Name parameter in Get-FunctionConfig has correct Mandatory value(@{name=Name; description=System.Management.Automation.PSObject[]; defaultValue=; parameterValue=String; type=@{name=String}; required=true; globbing=false; pipelineInput=false; position=1},&quot;True&quot;)" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig.help for Get-FunctionConfig has correct parameter type for Name" executed="True" result="Success" success="True" time="0.0064" asserts="0" description="help for Get-FunctionConfig has correct parameter type for Name">
                    <results>
                      <test-case description="help for Get-FunctionConfig has correct parameter type for Name" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig.help for Get-FunctionConfig has correct parameter type for Name(&quot;String&quot;,&quot;String&quot;)" time="0.0064" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig.finds help parameter in code: Name" executed="True" result="Success" success="True" time="0.0092" asserts="0" description="finds help parameter in code: Name">
                    <results>
                      <test-case description="finds help parameter in code: Name" name="Test help for Get-FunctionConfig.Test parameter help for Get-FunctionConfig.finds help parameter in code: Name(&quot;Name&quot;,&quot;Name&quot;)" time="0.0092" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test help for Get-FunctionConfig.should not be auto-generated" executed="True" result="Success" success="True" time="0.0085" asserts="0" description="should not be auto-generated">
                <results>
                  <test-case description="should not be auto-generated" name="Test help for Get-FunctionConfig.should not be auto-generated(@{examples=@{example=@{title=-------------------------- EXAMPLE 1 --------------------------; remarks=System.Management.Automation.PSObject[]; introduction=System.Management.Automation.PSObject[]; code=Get-FunctionConfig -Name 'ParameterName'}}; parameters=@{parameter=@{name=Name; description=System.Management.Automation.PSObject[]; defaultValue=; parameterValue=String; type=@{name=String}; required=true; globbing=false; pipelineInput=false; position=1}}; description=System.Management.Automation.PSObject[]; details=@{description=System.Management.Automation.PSObject[]; name=Get-FunctionConfig}; syntax=@{syntaxItem=@{name=Get-FunctionConfig; parameter=@{name=Name; parameterValue=String; description=System.Management.Automation.PSObject[]; required=true; globbing=false; pipelineInput=false; position=1}}}; xmlns:maml=http://schemas.microsoft.com/maml/2004/10; xmlns:command=http://schemas.microsoft.com/maml/dev/command/2004/10; xmlns:dev=http://schemas.microsoft.com/maml/dev/2004/10; Name=Get-FunctionConfig; Category=Function; Synopsis=Gets the value of a function config parameter.; Component=; Role=; Functionality=; ModuleName=AzureFunctionConfiguration})" time="0.0085" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test help for Get-FunctionConfig.gets description for Get-FunctionConfig" executed="True" result="Success" success="True" time="0.0094" asserts="0" description="gets description for Get-FunctionConfig">
                <results>
                  <test-case description="gets description for Get-FunctionConfig" name="Test help for Get-FunctionConfig.gets description for Get-FunctionConfig(@{examples=@{example=@{title=-------------------------- EXAMPLE 1 --------------------------; remarks=System.Management.Automation.PSObject[]; introduction=System.Management.Automation.PSObject[]; code=Get-FunctionConfig -Name 'ParameterName'}}; parameters=@{parameter=@{name=Name; description=System.Management.Automation.PSObject[]; defaultValue=; parameterValue=String; type=@{name=String}; required=true; globbing=false; pipelineInput=false; position=1}}; description=System.Management.Automation.PSObject[]; details=@{description=System.Management.Automation.PSObject[]; name=Get-FunctionConfig}; syntax=@{syntaxItem=@{name=Get-FunctionConfig; parameter=@{name=Name; parameterValue=String; description=System.Management.Automation.PSObject[]; required=true; globbing=false; pipelineInput=false; position=1}}}; xmlns:maml=http://schemas.microsoft.com/maml/2004/10; xmlns:command=http://schemas.microsoft.com/maml/dev/command/2004/10; xmlns:dev=http://schemas.microsoft.com/maml/dev/2004/10; Name=Get-FunctionConfig; Category=Function; Synopsis=Gets the value of a function config parameter.; Component=; Role=; Functionality=; ModuleName=AzureFunctionConfiguration})" time="0.0094" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test help for Get-FunctionConfig.gets example code from Get-FunctionConfig" executed="True" result="Success" success="True" time="0.0089" asserts="0" description="gets example code from Get-FunctionConfig">
                <results>
                  <test-case description="gets example code from Get-FunctionConfig" name="Test help for Get-FunctionConfig.gets example code from Get-FunctionConfig(@{examples=@{example=@{title=-------------------------- EXAMPLE 1 --------------------------; remarks=System.Management.Automation.PSObject[]; introduction=System.Management.Automation.PSObject[]; code=Get-FunctionConfig -Name 'ParameterName'}}; parameters=@{parameter=@{name=Name; description=System.Management.Automation.PSObject[]; defaultValue=; parameterValue=String; type=@{name=String}; required=true; globbing=false; pipelineInput=false; position=1}}; description=System.Management.Automation.PSObject[]; details=@{description=System.Management.Automation.PSObject[]; name=Get-FunctionConfig}; syntax=@{syntaxItem=@{name=Get-FunctionConfig; parameter=@{name=Name; parameterValue=String; description=System.Management.Automation.PSObject[]; required=true; globbing=false; pipelineInput=false; position=1}}}; xmlns:maml=http://schemas.microsoft.com/maml/2004/10; xmlns:command=http://schemas.microsoft.com/maml/dev/command/2004/10; xmlns:dev=http://schemas.microsoft.com/maml/dev/2004/10; Name=Get-FunctionConfig; Category=Function; Synopsis=Gets the value of a function config parameter.; Component=; Role=; Functionality=; ModuleName=AzureFunctionConfiguration})" time="0.0089" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test help for Get-FunctionConfig.gets example help from Get-FunctionConfig" executed="True" result="Success" success="True" time="0.0116" asserts="0" description="gets example help from Get-FunctionConfig">
                <results>
                  <test-case description="gets example help from Get-FunctionConfig" name="Test help for Get-FunctionConfig.gets example help from Get-FunctionConfig(@{examples=@{example=@{title=-------------------------- EXAMPLE 1 --------------------------; remarks=System.Management.Automation.PSObject[]; introduction=System.Management.Automation.PSObject[]; code=Get-FunctionConfig -Name 'ParameterName'}}; parameters=@{parameter=@{name=Name; description=System.Management.Automation.PSObject[]; defaultValue=; parameterValue=String; type=@{name=String}; required=true; globbing=false; pipelineInput=false; position=1}}; description=System.Management.Automation.PSObject[]; details=@{description=System.Management.Automation.PSObject[]; name=Get-FunctionConfig}; syntax=@{syntaxItem=@{name=Get-FunctionConfig; parameter=@{name=Name; parameterValue=String; description=System.Management.Automation.PSObject[]; required=true; globbing=false; pipelineInput=false; position=1}}}; xmlns:maml=http://schemas.microsoft.com/maml/2004/10; xmlns:command=http://schemas.microsoft.com/maml/dev/command/2004/10; xmlns:dev=http://schemas.microsoft.com/maml/dev/2004/10; Name=Get-FunctionConfig; Category=Function; Synopsis=Gets the value of a function config parameter.; Component=; Role=; Functionality=; ModuleName=AzureFunctionConfiguration})" time="0.0116" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test help for Import-FunctionConfig" executed="True" result="Success" success="True" time="0.1855" asserts="0" description="Test help for Import-FunctionConfig">
            <results>
              <test-suite type="TestFixture" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig" executed="True" result="Success" success="True" time="0.0997" asserts="0" description="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig">
                <results>
                  <test-suite type="ParameterizedTest" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.gets help for parameter: DoNotLogValues : in Import-FunctionConfig" executed="True" result="Success" success="True" time="0.015" asserts="0" description="gets help for parameter: DoNotLogValues : in Import-FunctionConfig">
                    <results>
                      <test-case description="gets help for parameter: DoNotLogValues : in Import-FunctionConfig" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.gets help for parameter: DoNotLogValues : in Import-FunctionConfig(@{name=DoNotLogValues; description=System.Management.Automation.PSObject[]; defaultValue=False; parameterValue=SwitchParameter; type=@{name=SwitchParameter}; required=false; globbing=false; pipelineInput=false; position=named})" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="gets help for parameter: FunctionParametersFilePath : in Import-FunctionConfig" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.gets help for parameter: FunctionParametersFilePath : in Import-FunctionConfig" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="gets help for parameter: ShowSASKeys : in Import-FunctionConfig" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.gets help for parameter: ShowSASKeys : in Import-FunctionConfig" time="0.0046" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.help for DoNotLogValues parameter in Import-FunctionConfig has correct Mandatory value" executed="True" result="Success" success="True" time="0.0154" asserts="0" description="help for DoNotLogValues parameter in Import-FunctionConfig has correct Mandatory value">
                    <results>
                      <test-case description="help for DoNotLogValues parameter in Import-FunctionConfig has correct Mandatory value" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.help for DoNotLogValues parameter in Import-FunctionConfig has correct Mandatory value(@{name=DoNotLogValues; description=System.Management.Automation.PSObject[]; defaultValue=False; parameterValue=SwitchParameter; type=@{name=SwitchParameter}; required=false; globbing=false; pipelineInput=false; position=named},&quot;False&quot;)" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="help for FunctionParametersFilePath parameter in Import-FunctionConfig has correct Mandatory value" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.help for FunctionParametersFilePath parameter in Import-FunctionConfig has correct Mandatory value" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="help for ShowSASKeys parameter in Import-FunctionConfig has correct Mandatory value" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.help for ShowSASKeys parameter in Import-FunctionConfig has correct Mandatory value" time="0.0054" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.help for Import-FunctionConfig has correct parameter type for DoNotLogValues" executed="True" result="Success" success="True" time="0.0157" asserts="0" description="help for Import-FunctionConfig has correct parameter type for DoNotLogValues">
                    <results>
                      <test-case description="help for Import-FunctionConfig has correct parameter type for DoNotLogValues" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.help for Import-FunctionConfig has correct parameter type for DoNotLogValues(&quot;SwitchParameter&quot;,&quot;SwitchParameter&quot;)" time="0.0056" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="help for Import-FunctionConfig has correct parameter type for FunctionParametersFilePath" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.help for Import-FunctionConfig has correct parameter type for FunctionParametersFilePath" time="0.0051" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="help for Import-FunctionConfig has correct parameter type for ShowSASKeys" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.help for Import-FunctionConfig has correct parameter type for ShowSASKeys" time="0.005" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.finds help parameter in code: DoNotLogValues" executed="True" result="Success" success="True" time="0.0257" asserts="0" description="finds help parameter in code: DoNotLogValues">
                    <results>
                      <test-case description="finds help parameter in code: DoNotLogValues" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.finds help parameter in code: DoNotLogValues(&quot;DoNotLogValues&quot;,DoNotLogValues FunctionParametersFilePath ShowSASKeys)" time="0.0074" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="finds help parameter in code: FunctionParametersFilePath" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.finds help parameter in code: FunctionParametersFilePath" time="0.0052" asserts="0" success="True" result="Success" executed="True" />
                      <test-case description="finds help parameter in code: ShowSASKeys" name="Test help for Import-FunctionConfig.Test parameter help for Import-FunctionConfig.finds help parameter in code: ShowSASKeys" time="0.0132" asserts="0" success="True" result="Success" executed="True" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test help for Import-FunctionConfig.should not be auto-generated" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="should not be auto-generated">
                <results>
                  <test-case description="should not be auto-generated" name="Test help for Import-FunctionConfig.should not be auto-generated(@{examples=@{example=@{title=-------------------------- EXAMPLE 1 --------------------------; remarks=System.Management.Automation.PSObject[]; introduction=System.Management.Automation.PSObject[]; code=Import-Config -Path &quot;.\FunctionParameters.psd1&quot;}}; parameters=@{parameter=System.Management.Automation.PSObject[]}; description=System.Management.Automation.PSObject[]; details=@{description=System.Management.Automation.PSObject[]; name=Import-FunctionConfig}; syntax=@{syntaxItem=@{name=Import-FunctionConfig; parameter=System.Management.Automation.PSObject[]}}; xmlns:maml=http://schemas.microsoft.com/maml/2004/10; xmlns:command=http://schemas.microsoft.com/maml/dev/command/2004/10; xmlns:dev=http://schemas.microsoft.com/maml/dev/2004/10; Name=Import-FunctionConfig; Category=Function; Synopsis=Imports a set of data into a script FunctionConfig variable.; Component=; Role=; Functionality=; ModuleName=AzureFunctionConfiguration})" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test help for Import-FunctionConfig.gets description for Import-FunctionConfig" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="gets description for Import-FunctionConfig">
                <results>
                  <test-case description="gets description for Import-FunctionConfig" name="Test help for Import-FunctionConfig.gets description for Import-FunctionConfig(@{examples=@{example=@{title=-------------------------- EXAMPLE 1 --------------------------; remarks=System.Management.Automation.PSObject[]; introduction=System.Management.Automation.PSObject[]; code=Import-Config -Path &quot;.\FunctionParameters.psd1&quot;}}; parameters=@{parameter=System.Management.Automation.PSObject[]}; description=System.Management.Automation.PSObject[]; details=@{description=System.Management.Automation.PSObject[]; name=Import-FunctionConfig}; syntax=@{syntaxItem=@{name=Import-FunctionConfig; parameter=System.Management.Automation.PSObject[]}}; xmlns:maml=http://schemas.microsoft.com/maml/2004/10; xmlns:command=http://schemas.microsoft.com/maml/dev/command/2004/10; xmlns:dev=http://schemas.microsoft.com/maml/dev/2004/10; Name=Import-FunctionConfig; Category=Function; Synopsis=Imports a set of data into a script FunctionConfig variable.; Component=; Role=; Functionality=; ModuleName=AzureFunctionConfiguration})" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test help for Import-FunctionConfig.gets example code from Import-FunctionConfig" executed="True" result="Success" success="True" time="0.0057" asserts="0" description="gets example code from Import-FunctionConfig">
                <results>
                  <test-case description="gets example code from Import-FunctionConfig" name="Test help for Import-FunctionConfig.gets example code from Import-FunctionConfig(@{examples=@{example=@{title=-------------------------- EXAMPLE 1 --------------------------; remarks=System.Management.Automation.PSObject[]; introduction=System.Management.Automation.PSObject[]; code=Import-Config -Path &quot;.\FunctionParameters.psd1&quot;}}; parameters=@{parameter=System.Management.Automation.PSObject[]}; description=System.Management.Automation.PSObject[]; details=@{description=System.Management.Automation.PSObject[]; name=Import-FunctionConfig}; syntax=@{syntaxItem=@{name=Import-FunctionConfig; parameter=System.Management.Automation.PSObject[]}}; xmlns:maml=http://schemas.microsoft.com/maml/2004/10; xmlns:command=http://schemas.microsoft.com/maml/dev/command/2004/10; xmlns:dev=http://schemas.microsoft.com/maml/dev/2004/10; Name=Import-FunctionConfig; Category=Function; Synopsis=Imports a set of data into a script FunctionConfig variable.; Component=; Role=; Functionality=; ModuleName=AzureFunctionConfiguration})" time="0.0057" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="ParameterizedTest" name="Test help for Import-FunctionConfig.gets example help from Import-FunctionConfig" executed="True" result="Success" success="True" time="0.0047" asserts="0" description="gets example help from Import-FunctionConfig">
                <results>
                  <test-case description="gets example help from Import-FunctionConfig" name="Test help for Import-FunctionConfig.gets example help from Import-FunctionConfig(@{examples=@{example=@{title=-------------------------- EXAMPLE 1 --------------------------; remarks=System.Management.Automation.PSObject[]; introduction=System.Management.Automation.PSObject[]; code=Import-Config -Path &quot;.\FunctionParameters.psd1&quot;}}; parameters=@{parameter=System.Management.Automation.PSObject[]}; description=System.Management.Automation.PSObject[]; details=@{description=System.Management.Automation.PSObject[]; name=Import-FunctionConfig}; syntax=@{syntaxItem=@{name=Import-FunctionConfig; parameter=System.Management.Automation.PSObject[]}}; xmlns:maml=http://schemas.microsoft.com/maml/2004/10; xmlns:command=http://schemas.microsoft.com/maml/dev/command/2004/10; xmlns:dev=http://schemas.microsoft.com/maml/dev/2004/10; Name=Import-FunctionConfig; Category=Function; Synopsis=Imports a set of data into a script FunctionConfig variable.; Component=; Role=; Functionality=; ModuleName=AzureFunctionConfiguration})" time="0.0047" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>